{
  "version": 3,
  "sources": ["../../../node_modules/jsmind/src/plugins/jsmind.draggable-node.js"],
  "sourcesContent": ["/**\n * @license BSD\n * @copyright 2014-2023 hizzgdev@163.com\n *\n * Project Home:\n *   https://github.com/hizzgdev/jsmind/\n */\n\nimport jsMind from 'jsmind';\n\nif (!jsMind) {\n    throw new Error('jsMind is not defined');\n}\n\nconst $ = jsMind.$;\n\nconst clear_selection =\n    'getSelection' in $.w\n        ? function () {\n              $.w.getSelection().removeAllRanges();\n          }\n        : function () {\n              $.d.selection.empty();\n          };\n\nconst DEFAULT_OPTIONS = {\n    line_width: 5,\n    line_color: 'rgba(0,0,0,0.3)',\n    line_color_invalid: 'rgba(255,51,51,0.6)',\n    lookup_delay: 200,\n    lookup_interval: 100,\n    scrolling_trigger_width: 20,\n    scrolling_step_length: 10,\n    shadow_node_class_name: 'jsmind-draggable-shadow-node',\n};\n\nclass DraggableNode {\n    constructor(jm, options) {\n        var opts = {};\n        jsMind.util.json.merge(opts, DEFAULT_OPTIONS);\n        jsMind.util.json.merge(opts, options);\n\n        this.version = '0.4.0';\n        this.jm = jm;\n        this.options = opts;\n        this.e_canvas = null;\n        this.canvas_ctx = null;\n        this.shadow = null;\n        this.shadow_p_x = 0;\n        this.shadow_p_y = 0;\n        this.shadow_w = 0;\n        this.shadow_h = 0;\n        this.active_node = null;\n        this.target_node = null;\n        this.target_direct = null;\n        this.client_w = 0;\n        this.client_h = 0;\n        this.offset_x = 0;\n        this.offset_y = 0;\n        this.hlookup_delay = 0;\n        this.hlookup_timer = 0;\n        this.capture = false;\n        this.moved = false;\n        this.canvas_draggable = jm.get_view_draggable();\n        this.view_panel = jm.view.e_panel;\n        this.view_panel_rect = null;\n    }\n    init() {\n        this.create_canvas();\n        this.create_shadow();\n        this.event_bind();\n    }\n    resize() {\n        this.jm.view.e_nodes.appendChild(this.shadow);\n        this.e_canvas.width = this.jm.view.size.w;\n        this.e_canvas.height = this.jm.view.size.h;\n    }\n    create_canvas() {\n        var c = $.c('canvas');\n        this.jm.view.e_panel.appendChild(c);\n        var ctx = c.getContext('2d');\n        this.e_canvas = c;\n        this.canvas_ctx = ctx;\n    }\n    create_shadow() {\n        var s = $.c('jmnode');\n        s.style.visibility = 'hidden';\n        s.style.zIndex = '3';\n        s.style.cursor = 'move';\n        s.style.opacity = '0.7';\n        s.className = this.options.shadow_node_class_name;\n        this.shadow = s;\n    }\n    reset_shadow(el) {\n        var s = this.shadow.style;\n        this.shadow.innerHTML = el.innerHTML;\n        s.left = el.style.left;\n        s.top = el.style.top;\n        s.width = el.style.width;\n        s.height = el.style.height;\n        s.backgroundImage = el.style.backgroundImage;\n        s.backgroundSize = el.style.backgroundSize;\n        s.transform = el.style.transform;\n        this.shadow_w = this.shadow.clientWidth;\n        this.shadow_h = this.shadow.clientHeight;\n    }\n    show_shadow() {\n        if (!this.moved) {\n            this.shadow.style.visibility = 'visible';\n        }\n    }\n    hide_shadow() {\n        this.shadow.style.visibility = 'hidden';\n    }\n    magnet_shadow(shadow_p, node_p, invalid) {\n        this.canvas_ctx.lineWidth = this.options.line_width;\n        this.canvas_ctx.strokeStyle = invalid\n            ? this.options.line_color_invalid\n            : this.options.line_color;\n        this.canvas_ctx.lineCap = 'round';\n        this.clear_lines();\n        this.canvas_lineto(shadow_p.x, shadow_p.y, node_p.x, node_p.y);\n    }\n    clear_lines() {\n        this.canvas_ctx.clearRect(0, 0, this.jm.view.size.w, this.jm.view.size.h);\n    }\n    canvas_lineto(x1, y1, x2, y2) {\n        this.canvas_ctx.beginPath();\n        this.canvas_ctx.moveTo(x1, y1);\n        this.canvas_ctx.lineTo(x2, y2);\n        this.canvas_ctx.stroke();\n    }\n    event_bind() {\n        var jd = this;\n        var container = this.jm.view.container;\n        $.on(container, 'mousedown', function (e) {\n            if (e.button === 0) {\n                jd.dragstart.call(jd, e);\n            }\n        });\n        $.on(container, 'mousemove', function (e) {\n            if (e.movementX !== 0 || e.movementY !== 0) {\n                jd.drag.call(jd, e);\n            }\n        });\n        $.on(container, 'mouseup', function (e) {\n            jd.dragend.call(jd, e);\n        });\n        $.on(container, 'touchstart', function (e) {\n            jd.dragstart.call(jd, e);\n        });\n        $.on(container, 'touchmove', function (e) {\n            jd.drag.call(jd, e);\n        });\n        $.on(container, 'touchend', function (e) {\n            jd.dragend.call(jd, e);\n        });\n    }\n    dragstart(e) {\n        if (!this.jm.get_editable()) {\n            return;\n        }\n        if (this.capture) {\n            return;\n        }\n        var jview = this.jm.view;\n        if (jview.is_editing()) {\n            return;\n        }\n        this.active_node = null;\n        this.view_draggable = this.jm.get_view_draggable();\n\n        var el = this.find_node_element(e.target);\n        if (!el) {\n            return;\n        }\n        if (this.view_draggable) {\n            this.jm.disable_view_draggable();\n        }\n        var nodeid = jview.get_binded_nodeid(el);\n        if (!!nodeid) {\n            var node = this.jm.get_node(nodeid);\n            if (!node.isroot) {\n                this.reset_shadow(el);\n                this.view_panel_rect = this.view_panel.getBoundingClientRect();\n                this.active_node = node;\n                this.offset_x =\n                    (e.clientX || e.touches[0].clientX) / jview.zoom_current - el.offsetLeft;\n                this.offset_y =\n                    (e.clientY || e.touches[0].clientY) / jview.zoom_current - el.offsetTop;\n                this.client_hw = Math.floor(el.clientWidth / 2);\n                this.client_hh = Math.floor(el.clientHeight / 2);\n                if (this.hlookup_delay != 0) {\n                    $.w.clearTimeout(this.hlookup_delay);\n                }\n                if (this.hlookup_timer != 0) {\n                    $.w.clearInterval(this.hlookup_timer);\n                }\n                var jd = this;\n                this.hlookup_delay = $.w.setTimeout(function () {\n                    jd.hlookup_delay = 0;\n                    jd.hlookup_timer = $.w.setInterval(function () {\n                        jd.lookup_target_node.call(jd);\n                    }, jd.options.lookup_interval);\n                }, this.options.lookup_delay);\n                jd.capture = true;\n            }\n        }\n    }\n    drag(e) {\n        if (!this.jm.get_editable()) {\n            return;\n        }\n        if (this.capture) {\n            e.preventDefault();\n            this.show_shadow();\n            this.moved = true;\n            clear_selection();\n            var jview = this.jm.view;\n            var px = (e.clientX || e.touches[0].clientX) / jview.zoom_current - this.offset_x;\n            var py = (e.clientY || e.touches[0].clientY) / jview.zoom_current - this.offset_y;\n            // scrolling container axisY if drag nodes exceeding container\n            if (\n                e.clientY - this.view_panel_rect.top < this.options.scrolling_trigger_width &&\n                this.view_panel.scrollTop > this.options.scrolling_step_length\n            ) {\n                this.view_panel.scrollBy(0, -this.options.scrolling_step_length);\n                this.offset_y += this.options.scrolling_step_length / jview.zoom_current;\n            } else if (\n                this.view_panel_rect.bottom - e.clientY < this.options.scrolling_trigger_width &&\n                this.view_panel.scrollTop <\n                    this.view_panel.scrollHeight -\n                        this.view_panel_rect.height -\n                        this.options.scrolling_step_length\n            ) {\n                this.view_panel.scrollBy(0, this.options.scrolling_step_length);\n                this.offset_y -= this.options.scrolling_step_length / jview.zoom_current;\n            }\n            // scrolling container axisX if drag nodes exceeding container\n            if (\n                e.clientX - this.view_panel_rect.left < this.options.scrolling_trigger_width &&\n                this.view_panel.scrollLeft > this.options.scrolling_step_length\n            ) {\n                this.view_panel.scrollBy(-this.options.scrolling_step_length, 0);\n                this.offset_x += this.options.scrolling_step_length / jview.zoom_current;\n            } else if (\n                this.view_panel_rect.right - e.clientX < this.options.scrolling_trigger_width &&\n                this.view_panel.scrollLeft <\n                    this.view_panel.scrollWidth -\n                        this.view_panel_rect.width -\n                        this.options.scrolling_step_length\n            ) {\n                this.view_panel.scrollBy(this.options.scrolling_step_length, 0);\n                this.offset_x -= this.options.scrolling_step_length / jview.zoom_current;\n            }\n            this.shadow.style.left = px + 'px';\n            this.shadow.style.top = py + 'px';\n            clear_selection();\n        }\n    }\n    dragend(e) {\n        if (!this.jm.get_editable()) {\n            return;\n        }\n        if (this.view_draggable) {\n            this.jm.enable_view_draggable();\n        }\n        if (this.capture) {\n            if (this.hlookup_delay != 0) {\n                $.w.clearTimeout(this.hlookup_delay);\n                this.hlookup_delay = 0;\n                this.clear_lines();\n            }\n            if (this.hlookup_timer != 0) {\n                $.w.clearInterval(this.hlookup_timer);\n                this.hlookup_timer = 0;\n                this.clear_lines();\n            }\n            if (this.moved) {\n                var src_node = this.active_node;\n                var target_node = this.target_node;\n                var target_direct = this.target_direct;\n                this.move_node(src_node, target_node, target_direct);\n            }\n            this.hide_shadow();\n        }\n        this.view_panel_rect = null;\n        this.moved = false;\n        this.capture = false;\n    }\n    find_node_element(el) {\n        if (\n            el === this.jm.view.e_nodes ||\n            el === this.jm.view.e_panel ||\n            el === this.jm.view.container\n        ) {\n            return null;\n        }\n        if (el.tagName.toLowerCase() === 'jmnode') {\n            return el;\n        }\n        return this.find_node_element(el.parentNode);\n    }\n    lookup_target_node() {\n        let sx = this.shadow.offsetLeft;\n        let sy = this.shadow.offsetTop;\n        if (sx === this.shadow_p_x && sy === this.shadow_p_y) {\n            return;\n        }\n        this.shadow_p_x = sx;\n        this.shadow_p_y = sy;\n\n        let target_direction =\n            this.shadow_p_x + this.shadow_w / 2 >= this.get_root_x()\n                ? jsMind.direction.right\n                : jsMind.direction.left;\n        let overlapping_node = this.lookup_overlapping_node_parent(target_direction);\n        let target_node = overlapping_node || this.lookup_close_node(target_direction);\n        if (!!target_node) {\n            let points = this.calc_point_of_node(target_node, target_direction);\n            let invalid = jsMind.node.inherited(this.active_node, target_node);\n            this.magnet_shadow(points.sp, points.np, invalid);\n            this.target_node = target_node;\n            this.target_direct = target_direction;\n        }\n    }\n    get_root_x() {\n        let root = this.jm.get_root();\n        let root_location = root.get_location();\n        let root_size = root.get_size();\n        return root_location.x + root_size.w / 2;\n    }\n\n    lookup_overlapping_node_parent(direction) {\n        let shadowRect = this.shadow.getBoundingClientRect();\n        let x = shadowRect.x + (shadowRect.width * (1 - direction)) / 2;\n        let deltaX = (this.jm.options.layout.hspace + this.jm.options.layout.pspace) * direction;\n        let deltaY = shadowRect.height;\n        let points = [\n            [x, shadowRect.y],\n            [x, shadowRect.y + deltaY / 2],\n            [x, shadowRect.y + deltaY],\n            [x + deltaX / 2, shadowRect.y],\n            [x + deltaX / 2, shadowRect.y + deltaY / 2],\n            [x + deltaX / 2, shadowRect.y + deltaY],\n            [x + deltaX, shadowRect.y],\n            [x + deltaX, shadowRect.y + deltaY / 2],\n            [x + deltaX, shadowRect.y + deltaY],\n        ];\n        for (const p of points) {\n            let n = this.lookup_node_parent_by_location(p[0], p[1]);\n            if (!!n) {\n                return n;\n            }\n        }\n    }\n\n    lookup_node_parent_by_location(x, y) {\n        return $.d\n            .elementsFromPoint(x, y)\n            .filter(\n                x => x.tagName === 'JMNODE' && x.className !== this.options.shadow_node_class_name\n            )\n            .map(el => this.jm.view.get_binded_nodeid(el))\n            .map(id => id && this.jm.mind.nodes[id])\n            .map(n => n && n.parent)\n            .find(n => n);\n    }\n\n    lookup_close_node(direction) {\n        return Object.values(this.jm.mind.nodes)\n            .filter(n => n.direction == direction || n.isroot)\n            .filter(n => this.jm.layout.is_visible(n))\n            .filter(n => this.shadow_on_target_side(n, direction))\n            .map(n => ({ node: n, distance: this.shadow_to_node(n, direction) }))\n            .reduce(\n                (prev, curr) => {\n                    return prev.distance < curr.distance ? prev : curr;\n                },\n                { node: this.jm.get_root(), distance: Number.MAX_VALUE }\n            ).node;\n    }\n\n    shadow_on_target_side(node, dir) {\n        return (\n            (dir == jsMind.direction.right && this.shadow_to_right_of_node(node) > 0) ||\n            (dir == jsMind.direction.left && this.shadow_to_left_of_node(node) > 0)\n        );\n    }\n\n    shadow_to_right_of_node(node) {\n        return this.shadow_p_x - node.get_location().x - node.get_size().w;\n    }\n\n    shadow_to_left_of_node(node) {\n        return node.get_location().x - this.shadow_p_x - this.shadow_w;\n    }\n\n    shadow_to_base_line_of_node(node) {\n        return this.shadow_p_y + this.shadow_h / 2 - node.get_location().y - node.get_size().h / 2;\n    }\n\n    shadow_to_node(node, dir) {\n        let distance_x =\n            dir === jsMind.direction.right\n                ? Math.abs(this.shadow_to_right_of_node(node))\n                : Math.abs(this.shadow_to_left_of_node(node));\n        let distance_y = Math.abs(this.shadow_to_base_line_of_node(node));\n        return distance_x + distance_y;\n    }\n\n    calc_point_of_node(node, dir) {\n        let ns = node.get_size();\n        let nl = node.get_location();\n        let node_x = node.isroot\n            ? nl.x + ns.w / 2\n            : nl.x + (ns.w * (1 + dir)) / 2 + this.options.line_width * dir;\n        let node_y = nl.y + ns.h / 2;\n        let shadow_x =\n            this.shadow_p_x + (this.shadow_w * (1 - dir)) / 2 - this.options.line_width * dir;\n        let shadow_y = this.shadow_p_y + this.shadow_h / 2;\n        return {\n            sp: { x: shadow_x, y: shadow_y },\n            np: { x: node_x, y: node_y },\n        };\n    }\n\n    move_node(src_node, target_node, target_direct) {\n        var shadow_h = this.shadow.offsetTop;\n        if (!!target_node && !!src_node && !jsMind.node.inherited(src_node, target_node)) {\n            // lookup before_node\n            var sibling_nodes = target_node.children;\n            var sc = sibling_nodes.length;\n            var node = null;\n            var delta_y = Number.MAX_VALUE;\n            var node_before = null;\n            var beforeid = '_last_';\n            while (sc--) {\n                node = sibling_nodes[sc];\n                if (node.direction == target_direct && node.id != src_node.id) {\n                    var dy = node.get_location().y - shadow_h;\n                    if (dy > 0 && dy < delta_y) {\n                        delta_y = dy;\n                        node_before = node;\n                        beforeid = '_first_';\n                    }\n                }\n            }\n            if (!!node_before) {\n                beforeid = node_before.id;\n            }\n            this.jm.move_node(src_node.id, beforeid, target_node.id, target_direct);\n        }\n        this.active_node = null;\n        this.target_node = null;\n        this.target_direct = null;\n    }\n    jm_event_handle(type, data) {\n        if (type === jsMind.event_type.resize) {\n            this.resize();\n        }\n    }\n}\n\nvar draggable_plugin = new jsMind.plugin('draggable_node', function (jm, options) {\n    var jd = new DraggableNode(jm, options);\n    jd.init();\n    jm.add_event_listener(function (type, data) {\n        jd.jm_event_handle.call(jd, type, data);\n    });\n});\n\njsMind.register_plugin(draggable_plugin);\n"],
  "mappings": "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",
  "names": ["jsMind", "Error", "$", "clear_selection", "w", "getSelection", "removeAllRanges", "d", "selection", "empty", "DEFAULT_OPTIONS", "line_width", "line_color", "line_color_invalid", "lookup_delay", "lookup_interval", "scrolling_trigger_width", "scrolling_step_length", "shadow_node_class_name", "DraggableNode", "jm", "options", "opts", "util", "json", "merge", "this", "version", "e_canvas", "canvas_ctx", "shadow", "shadow_p_x", "shadow_p_y", "shadow_w", "shadow_h", "active_node", "target_node", "target_direct", "client_w", "client_h", "offset_x", "offset_y", "hlookup_delay", "hlookup_timer", "capture", "moved", "canvas_draggable", "get_view_draggable", "view_panel", "view", "e_panel", "view_panel_rect", "init", "create_canvas", "create_shadow", "event_bind", "resize", "e_nodes", "appendChild", "width", "size", "height", "h", "c", "ctx", "getContext", "s", "style", "visibility", "zIndex", "cursor", "opacity", "className", "el", "innerHTML", "left", "top", "backgroundImage", "backgroundSize", "transform", "clientWidth", "clientHeight", "show_shadow", "hide_shadow", "shadow_p", "node_p", "invalid", "lineWidth", "strokeStyle", "lineCap", "clear_lines", "canvas_lineto", "x", "y", "clearRect", "x1", "y1", "x2", "y2", "beginPath", "moveTo", "lineTo", "stroke", "jd", "container", "on", "e", "button", "dragstart", "call", "movementX", "movementY", "drag", "dragend", "get_editable", "jview", "is_editing", "view_draggable", "find_node_element", "target", "disable_view_draggable", "nodeid", "get_binded_nodeid", "node", "get_node", "isroot", "reset_shadow", "getBoundingClientRect", "clientX", "touches", "zoom_current", "offsetLeft", "clientY", "offsetTop", "client_hw", "Math", "floor", "client_hh", "clearTimeout", "clearInterval", "setTimeout", "setInterval", "lookup_target_node", "preventDefault", "px", "py", "scrollTop", "scrollBy", "bottom", "scrollHeight", "scrollLeft", "right", "scrollWidth", "enable_view_draggable", "src_node", "move_node", "tagName", "toLowerCase", "parentNode", "sx", "sy", "target_direction", "get_root_x", "direction", "lookup_overlapping_node_parent", "lookup_close_node", "points", "calc_point_of_node", "inherited", "magnet_shadow", "sp", "np", "root", "get_root", "root_location", "get_location", "root_size", "get_size", "shadowRect", "deltaX", "layout", "hspace", "pspace", "deltaY", "p", "n", "lookup_node_parent_by_location", "elementsFromPoint", "filter", "map", "id", "mind", "nodes", "parent", "find", "Object", "values", "is_visible", "shadow_on_target_side", "distance", "shadow_to_node", "reduce", "prev", "curr", "Number", "MAX_VALUE", "dir", "shadow_to_right_of_node", "shadow_to_left_of_node", "abs", "shadow_to_base_line_of_node", "ns", "nl", "node_x", "node_y", "sibling_nodes", "children", "sc", "length", "delta_y", "node_before", "beforeid", "dy", "type", "data", "event_type", "draggable_plugin", "plugin", "add_event_listener", "jm_event_handle", "register_plugin"]
}
